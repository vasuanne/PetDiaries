package spring.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import spring.model.Pet;
import spring.service.PetService;

@Controller
public class PetController {
	
	private PetService userService;
	
	@Autowired(required=true)
	//@Qualifier(value="userService")
	public void setPetService(PetService ps){
		this.userService = ps;
	}
		
	@RequestMapping(value = "/users", method = RequestMethod.GET)
	public String listPets(Model model) {
		System.out.println("In listPets");
		model.addAttribute("user", new Pet());
		model.addAttribute("listPets", this.userService.listPets());
		return "user";
	}
	
	//For add and update user both
	@RequestMapping(value= "/user/add", method = RequestMethod.POST)
	public String addPet(@ModelAttribute("user") Pet p)
	{
		
		boolean error=false;
		System.out.println("In addPets"+p.getPetname() +" "+ p.getPassword());
		//if(p.getId() == 0){
			//new user, add it
			error=this.userService.addPet(p);
			
			if(error)
			{
				return "invalid-username";
			}
			else
			{
				return "register-success";
			}
		//}else{
			//existing user, call update
			//this.userService.updatePet(p);
		//}
		
	}
	
	@RequestMapping("/remove/{id}")
    public String removePet(@PathVariable("id") int id){
		
        this.userService.removePet(id);
        return "redirect:/users";
    }
 
    @RequestMapping("/edit/{id}")
    public String editPet(@PathVariable("id") int id, Model model){
        model.addAttribute("user", this.userService.getPetById(id));
        model.addAttribute("listPets", this.userService.listPets());
        return "user";
    }
    
    @RequestMapping(value = "/redirect", method = RequestMethod.GET)
    public String redirect() {
       return "redirect:signUp";
    }
   
    
    @RequestMapping(value = "/signUp", method = RequestMethod.GET)
    public String finalPage(@ModelAttribute("user") Pet p) {
       return "signup";
    }
    
    @RequestMapping(value = "/login", method = RequestMethod.GET)
    public String login() {
       return "redirect:users";
    }
    
    @RequestMapping(value= "/user/login", method = RequestMethod.POST)
	public String loginPet(@ModelAttribute("user") Pet p){
    	
   // 	System.out.println("in login");
    	boolean retVal=this.userService.validatePet(p);
		
    	if(!retVal)
    	{
    	//	System.out.println("Doesn't exist");
    		return "redirect:/invalid-login";
    	}
    	else
    	{
    	//	System.out.println("Exists");
    		return "dashboard";
    	}
		
	}
    
    @RequestMapping(value= "/user/signup", method = RequestMethod.POST)
  	public String signupPet(@ModelAttribute("user") Pet p){
      	
     // 	System.out.println("in login");
      	boolean retVal=this.userService.addPet(p);
  		
      	if(retVal)
      	{
      	//	System.out.println("Doesn't exist");
      		return "invalid-username";
      	}
      	else
      	{
      	//	System.out.println("Exists");
      		return "register-success";
      	}
  		
  	}
      
    
    @RequestMapping(value = "/invalid-login", method = RequestMethod.GET)
    public String dispLoginError() {
       return "loginError";
    }
}