package spring.controllers;


import java.util.Date;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import spring.model.OwnerProfile;
import spring.model.Pet;
import spring.model.ResetToken;
import spring.service.ProfileFactoryService;
import spring.service.OwnerProfileService;
import java.util.List;
@Controller
public class OwnerProfileController {
	
	private OwnerProfileService ownerProfileService;
	
	@Autowired(required=true)
	//@Qualifier(value="ownerProfileService")
	public void setOwnerProfileService(OwnerProfileService ps){
		System.out.println("In ownerProfile controller");
		this.ownerProfileService = ps;
	}
	
	

	//For add and update ownerProfile both
	@RequestMapping(value= "/ownerProfile/add", method = RequestMethod.POST)
	public String addOwnerProfile(@ModelAttribute("ownerProfile") OwnerProfile p)
	{
		
		boolean error=false;
	
		//if(p.getId() == 0){
			//new ownerProfile, add it
			error=this.ownerProfileService.addOwnerProfile(p);
			
			if(error)
			{
				return "invalid-ownerProfilename";
			}
			else
			{
				return "register-success";
			}
		//}else{
			//existing ownerProfile, call update
			//this.ownerProfileService.updateOwnerProfile(p);
		//}
		
	}
	
	@RequestMapping("/remove/{ownerProfileId}")
    public String removeOwnerProfile(@PathVariable("ownerProfileId") int id){
		
        this.ownerProfileService.removeOwnerProfile(id);
        return "redirect:/ownerProfiles";
    }
 
    
    @RequestMapping(value = "/redirect", method = RequestMethod.GET)
    public String redirect() {
       return "redirect:signUp";
    }
   
    
    @RequestMapping(value = "/signUp", method = RequestMethod.GET)
    public String finalPage(@ModelAttribute("ownerProfile") OwnerProfile p) {
       return "signup";
    }
    
    @RequestMapping(value = "/login", method = RequestMethod.GET)
    public String login() {
       return "redirect:ownerProfiles";
    }
 
    
    @RequestMapping(value= "/ownerProfile/login", method = RequestMethod.POST)
	public String loginOwnerProfile(Model model, @ModelAttribute("ownerProfile") OwnerProfile p){
    	
   // 	System.out.println("in login");
    	boolean retVal=this.ownerProfileService.validateOwnerProfile(p);
		int ownerProfileId=0;
    	if(!retVal)
    	{
    	//	System.out.println("Doesn't exist");
    		if(p.getError().equals("Password"))
    		{
    			p=this.ownerProfileService.getOwnerProfileById(p.getOwnerProfileId());
    			if(p.getInvalidLoginAttempts()==3)
    				return "redirect:/account-locked";
    			System.out.println("In OwnerProfile Controller, password set");
    			this.ownerProfileService.logInvalidAttempt(p);
    		}
    		return "redirect:/invalid-login";
    	}
    	else
    	{
    	//	System.out.println("Exists");
    		
    		System.out.println("OwnerProfile Type is" + p.getOwnerProfileType());
    		ownerProfileId=p.getOwnerProfileId();
    		model.addAttribute("ownerProfileId",ownerProfileId);
    		model.addAttribute("ownerProfilename",p.getOwnerProfilename());
    		model.addAttribute("firstName",p.getFirstName());
    		p.setLoginTime(new Date());
    		this.ownerProfileService.updateOwnerProfile(p);
    		if(p.getOwnerProfileType()=="Admin")
    		{
    			return "adminDashboard";
    		}
    		else if((p.getOwnerProfileType()).equals("Owner"))
    		{
    			model.addAttribute("petCount",this.ownerProfileService.getPetCount(ownerProfileId));
    			model.addAttribute("contactInfo",this.ownerProfileService.isContactInfoSet(ownerProfileId));
    			return "ownerDashboard";
    		}
    		else 
    		{
    			
    			return "ownerDashboard";
    		}
    	}
		
	}
  
    
    @RequestMapping(value= "/ownerProfile/signup", method = RequestMethod.POST)
  	public String signupOwnerProfile(Model model, @ModelAttribute("ownerProfile") OwnerProfile p){
      	
     // 	System.out.println("in login");
    	
    	if(p.getFirstName()=="" || p.getLastName()=="")
    	{
    		model.addAttribute("invalidInput","Error: First and last name cannot be empty");
    		return "signup";
    	}
    	if(p.getOwnerProfileType()=="")
    	{
    		model.addAttribute("invalidInput","Error: OwnerProfile role cannot be empty");
    		return "signup";
    	}
    	if(p.getPassword()=="")
    	{
    		model.addAttribute("invalidInput","Error: Password cannot be empty");
    		return "signup";
    	}
    	if(p.getOwnerProfilename()=="")
    	{
    		model.addAttribute("invalidInput","Error: ownerProfilename cannot be empty");
    		return "signup";
    	}
      	boolean retVal=this.ownerProfileService.addOwnerProfile(p);
  		
      	
      	if(retVal)
      	{
      		model.addAttribute("invalidInput","Error: OwnerProfilename exists");
      		return "signup";
      	}
      	else
      	{
      	//	System.out.println("Exists");
      		int ownerProfileId=	this.ownerProfileService.getOwnerProfileId(p.getOwnerProfilename());
      		ResetToken r=new ResetToken();
      		r.setOwnerProfileId(ownerProfileId);
      		r.setOwnerProfilename(p.getOwnerProfilename());
      		r.setToken(null);
      		r.setExpiryTime(null);
      		
      		this.ownerProfileService.createInitialTokenEntry(r);
      		return "redirect:/register-success";
      	}
  		
  	}
     
    @RequestMapping(value = "/register-success", method = RequestMethod.GET)
    public String registeredSuccessfully() {
       return "registerSuccess";
    }
    
    
    @RequestMapping(value = "/account-locked", method = RequestMethod.GET)
    public String displayAccountLockoutError() {
       return "accountLocked";
    }
    
    @RequestMapping(value = "/invalid-login", method = RequestMethod.GET)
    public String displayLoginError() {
       return "loginError";
    }
    
    @RequestMapping(value= "/ownerProfile/dash", method = RequestMethod.POST)
   	public String displayDashboard(Model model, 
   			@ModelAttribute("pet") OwnerProfile u1,
   			@ModelAttribute("contactInfo") OwnerProfile u2){
    		OwnerProfile u=null;
      // 	System.out.println("in login");
    		if(u1.getOwnerProfileId()>0)
    			u = this.ownerProfileService.getOwnerProfileById(u1.getOwnerProfileId());
    		else if(u2.getOwnerProfileId()>0)
    			u = this.ownerProfileService.getOwnerProfileById(u2.getOwnerProfileId());
       	//	System.out.println("Exists");
       		System.out.println("OwnerProfile Type is" + u1.getOwnerProfileType());
       		
  
       		int ownerProfileId=u.getOwnerProfileId();
       		model.addAttribute("ownerProfileId",ownerProfileId);
       		model.addAttribute("ownerProfilename",u.getOwnerProfilename());
       		model.addAttribute("firstName",u.getFirstName());

       		if(u.getOwnerProfileType()=="Admin")
       		{
       			return "adminDashboard";
       		}
       		else if((u.getOwnerProfileType()).equals("Owner"))
       		{
       			model.addAttribute("petCount",this.ownerProfileService.getPetCount(ownerProfileId));
       			model.addAttribute("contactInfo",this.ownerProfileService.isContactInfoSet(ownerProfileId));
       			return "ownerDashboard";
       		}
       		else 
       		{
       			
       			return "ownerDashboard";
       		}
       	}
    
	@RequestMapping(value = "/passwordReset/{tokenId}/{ownerProfilename}", method = RequestMethod.GET)
	public String resetPassword(Model model,
			@PathVariable("tokenId") String tokenId,
			@PathVariable("ownerProfilename") String ownerProfilename) {
		System.out.println("In reset ownerProfile");
		
		int ownerProfileId=this.ownerProfileService.getOwnerProfileId(ownerProfilename);
		String token=this.ownerProfileService.getResetToken(ownerProfilename);
		Date tokenExpiryTime=this.ownerProfileService.getExpiryDate(ownerProfilename);
		OwnerProfile u1=this.ownerProfileService.getOwnerProfileById(ownerProfileId);
		
		System.out.println(ownerProfileId + " token="+token + " time="+tokenExpiryTime);
		Date currentTime=new Date();
		if(tokenId.equals(token))
		{
			if(currentTime.before(tokenExpiryTime))
			{
				model.addAttribute("ownerProfile",u1);
				model.addAttribute("success",false);
				return "passwordRecoveryPage";
			}
		}
		
		return "invalidRecoveryLink";
	}
	
	@RequestMapping(value = "/ownerProfile/updatePassword", method = RequestMethod.POST)
	public String updatePassword(Model model, @ModelAttribute("ownerProfile") OwnerProfile u) {
		System.out.println("In update password");
		
		OwnerProfile temp1=this.ownerProfileService.getOwnerProfileById(u.getOwnerProfileId());
		Date d=temp1.getLoginTime();
		
		u.setLoginTime(d);
		u.setAccountLocked(false);
		u.setError(null);
		u.setInvalidLoginAttempts(0);
		
		this.ownerProfileService.updateOwnerProfile(u);
		
		model.addAttribute("success",true);
		return "passwordRecoveryPage";
	}
	
	@RequestMapping(value = "/ownerProfile/suggestedOwners", method = RequestMethod.GET)
	public String listPets(Model model,@RequestParam("ownerProfileId") int ownerProfileId) {
	
		System.out.println("In suggested owners");
		model.addAttribute("ownerProfileId",ownerProfileId);
		model.addAttribute("ownerProfile",new OwnerProfile());
		model.addAttribute("listOwners", this.ownerProfileService.listOwners(ownerProfileId));

		return "suggestedOwners";
	}
	
	@RequestMapping(value = "/ownerProfile/listOwners", method = RequestMethod.POST)
	public String listOwners(Model model,
			@ModelAttribute("ownerProfile") OwnerProfile p,
			@RequestParam("ownerProfileId") int ownerProfileId,
			@RequestParam("ownerProfilename") String ownerProfilename,
			@RequestParam("ownerProfileType") String ownerProfileType
			) {
	
		System.out.println("In list owners ");
		model.addAttribute("ownerProfileId",ownerProfileId);

		model.addAttribute("listOwners", this.ownerProfileService.listOwners(ownerProfileId));

		/*FActory pattern comes here*/
		return "suggestedOwners";
	}
	
	
	
}